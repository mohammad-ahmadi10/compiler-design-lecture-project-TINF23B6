Compiling with own parser...
Dumping IR ...
module source.tinf:

define i32 @main() {
main:
  %i = alloca i32, align 4
  store i32 %8 ptr %i, align 4
  br label %for_cond
for_cond:
  %18 = load i32, ptr %i, align 4
  %15 = icmp ne i1 %16, %19
  br i1 %14, label %for_body, label %after_for
for_body:
  %40 = load i32, ptr %i, align 4
  %38 = add i32 %39, %41
  store i32 %36 ptr %i, align 4
  br label %for_increment
for_increment:
  %28 = load i32, ptr %i, align 4
  %26 = add i32 %27, %29
  store i32 %24 ptr %i, align 4
  br label %for_cond
after_for:
  %i = alloca i32, align 4
  store i32 %48 ptr %i, align 4
  br label %for_cond
for_cond:
  %58 = load i32, ptr %i, align 4
  %55 = icmp ne i1 %56, %59
  br i1 %54, label %for_body, label %after_for
for_body:
  br label %for_increment
for_increment:
  %68 = load i32, ptr %i, align 4
  %66 = add i32 %67, %69
  store i32 %64 ptr %i, align 4
  br label %for_cond
after_for:
  %i = alloca i32, align 4
  store i32 %77 ptr %i, align 4
  br label %for_cond
for_cond:
  %87 = load i32, ptr %i, align 4
  %84 = icmp ne i1 %85, %88
  br i1 %83, label %for_body, label %after_for
for_body:
  %j = alloca i32, align 4
  store i32 %106 ptr %j, align 4
  br label %for_cond
for_cond:
  %116 = load i32, ptr %j, align 4
  %113 = icmp ne i1 %114, %117
  br i1 %112, label %for_body, label %after_for
for_body:
  br label %for_increment
for_increment:
  %126 = load i32, ptr %j, align 4
  %124 = add i32 %125, %127
  store i32 %122 ptr %i, align 4
  br label %for_cond
after_for:
  br label %for_increment
for_increment:
  %97 = load i32, ptr %i, align 4
  %95 = add i32 %96, %98
  store i32 %93 ptr %i, align 4
  br label %for_cond
after_for:
  ret i32 %133
}

Compilation successful!